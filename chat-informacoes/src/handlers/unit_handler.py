from typing import Dict, List, Any
import json

class UnitHandler:
    """
    Classe respons√°vel por gerenciar a sele√ß√£o de unidades da Fhemig.
    """

    def __init__(self, units_file: str):
        """
        Inicializa o UnitHandler.

        :param units_file: Caminho para o arquivo JSON contendo as informa√ß√µes das unidades.
        """
        self.units = self.load_units(units_file)
        self.unit_names = [unit['name'] for unit in self.units]

    def load_units(self, file_path: str) -> List[Dict[str, Any]]:
        """
        Carrega as unidades a partir de um arquivo JSON.

        :param file_path: Caminho para o arquivo JSON das unidades.
        :return: Lista de dicion√°rios contendo informa√ß√µes das unidades.
        """
        try:
            with open(file_path, 'r', encoding='utf-8') as file:
                return json.load(file)
        except FileNotFoundError:
            print(f"Erro: Arquivo de unidades n√£o encontrado: {file_path}")
            return []
        except json.JSONDecodeError:
            print(f"Erro: Falha ao decodificar o arquivo JSON: {file_path}")
            return []

    def get_initial_message(self, nome_usuario) -> str:
        """
        Retorna a mensagem inicial para sele√ß√£o de unidade.

        :return: String contendo a mensagem de boas-vindas e a lista de unidades.
        """
        unit_list = "\n".join([f"{i+1}. {unit['name']}" for i, unit in enumerate(self.units)])
        return (
            f"Ol√°, **{nome_usuario}**!\n\n"
             
             "üëã Bem-vindo(a) ao Assistente Virtual da Fhemig!\n\n"

            "Estou aqui para facilitar seu acesso √†s informa√ß√µes cruciais para seu dia a dia de trabalho.\n\n"

            "Vamos come√ßar nossa jornada selecionando a sua unidade de trabalho.\n\n"

            "Por favor, **escolha o n√∫mero correspondente √† sua unidade** na lista abaixo:\n\n"

            f"{unit_list}\n\n"

            "Ap√≥s a sele√ß√£o, poderei te ajudar com:\n\n"
            "‚Ä¢ Consulta de indicadores espec√≠ficos da sua unidade\n"
            "‚Ä¢ Acesso a relat√≥rios e informa√ß√µes do sistema de gest√£o hospitalar\n"
            "‚Ä¢ Esclarecimento de d√∫vidas sobre os dados dispon√≠veis\n\n"

            "Estou animado para auxiliar voc√™! Vamos l√°, qual √© o n√∫mero da sua unidade? üòä"
        )

    def handle(self, user_input: str) -> Dict[str, Any]:
        """
        Processa a entrada do usu√°rio para sele√ß√£o de unidade.

        :param user_input: Entrada do usu√°rio (n√∫mero da unidade).
        :return: Dicion√°rio contendo o resultado do processamento.
        """
        if user_input.isdigit():
            index = int(user_input) - 1
            print(f"User input: {user_input}, Calculated index: {index}")
            if 0 <= index < len(self.units):
                selected_unit = self.units[index]
                print(f"Selected unit: {selected_unit}")
                return self.create_success_response(selected_unit)
            else:
                return self.create_error_response()
        else:
            return self.create_error_response()

    def create_success_response(self, unit: Dict[str, str]) -> Dict[str, Any]:
        """
        Cria uma resposta de sucesso para a sele√ß√£o de unidade.

        :param unit: Dicion√°rio contendo informa√ß√µes da unidade selecionada.
        :return: Dicion√°rio com a resposta formatada de sucesso.
        """
        return {
            "success": True,
            "selected_unit": unit['name'],
            "system": unit['system'],
            "message": (

                f"Obrigado!\n\n"
             
                "Voc√™ selecionou a unidade "
                f"**{unit['name']}**, que utiliza o sistema **{unit['system']}**.\n\n"

                "Agora, vamos acessar as informa√ß√µes mais relevantes para voc√™.\n\n"

                "Por favor, selecione o n√∫mero correspondente ao indicador que voc√™ deseja consultar:\n\n"

                "1Ô∏è‚É£ Taxa de Ocupa√ß√£o Hospitalar\n"
                "2Ô∏è‚É£ Tempo M√©dio de Perman√™ncia\n"
                "3Ô∏è‚É£ N√∫mero de Interna√ß√µes\n"
                "4Ô∏è‚É£ N√∫mero de Cirurgias\n"
                "5Ô∏è‚É£ N√∫mero de Doadores Efetivos\n"
                "6Ô∏è‚É£ Pacientes Dia\n"
                "7Ô∏è‚É£ Sa√≠das Hospitalares\n"
                "8Ô∏è‚É£ √ìbitos Hospitalares\n"
                "9Ô∏è‚É£ √ìbitos Institucionais\n"
                "üîü Leitos Dia\n"
                "1Ô∏è‚É£1Ô∏è‚É£ Consultas M√©dicas Eletivas\n"
                "1Ô∏è‚É£2Ô∏è‚É£ Consultas M√©dicas de Urg√™ncia\n"
                "1Ô∏è‚É£3Ô∏è‚É£ Sa√≠das por Cl√≠nicas\n"
                "1Ô∏è‚É£4Ô∏è‚É£ Taxa de Mortalidade Hospitalar Geral (%)\n"
                "1Ô∏è‚É£5Ô∏è‚É£ Taxa de Mortalidade Institucional (%)\n"
                "1Ô∏è‚É£6Ô∏è‚É£ √çndice de Renova√ß√£o de Leitos\n"
                "1Ô∏è‚É£7Ô∏è‚É£ Outros\n\n"

                "Digite apenas o n√∫mero da sua escolha (1-6).\n\n"

                "Ap√≥s sua sele√ß√£o, lhe informarei como acessar essa informa√ß√£o nas fontes oficiais da Fhemig.\n\n"
                            
                "Se voc√™ precisar de informa√ß√µes n√£o listadas aqui, a\n"
                "op√ß√£o \"Outros\" est√° dispon√≠vel para atender √†s suas necessidades espec√≠ficas.\n\n"

                "Estou aqui para ajudar! Qual informa√ß√£o voc√™ precisa? üìä"


            )
        }

    def create_error_response(self) -> Dict[str, Any]:
        """
        Cria uma resposta de erro para sele√ß√£o inv√°lida de unidade.

        :param error_message: Mensagem de erro a ser exibida.
        :return: Dicion√°rio com a resposta formatada de erro.
        """
        return {
            "success": False,
            "message": "Por favor, digite apenas o n√∫mero da unidade desejada."
        }
